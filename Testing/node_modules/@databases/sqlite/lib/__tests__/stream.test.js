"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = undefined && undefined.__asyncValues || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator],
        i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function (v) {
            return new Promise(function (resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function (v) {
            resolve({ value: v, done: d });
        }, reject);
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
jest.setTimeout(30000);
const db = __1.default();
test('streaming', () => __awaiter(void 0, void 0, void 0, function* () {
    var e_1, _a;
    yield db.query(__1.sql`CREATE TABLE stream_values (id BIGINT NOT NULL PRIMARY KEY);`);
    const allValues = [];
    for (let batch = 0; batch < 10; batch++) {
        const batchValues = [];
        for (let i = 0; i < 10; i++) {
            const value = batch * 10 + i;
            batchValues.push(value);
            allValues.push(value);
        }
        yield db.query(__1.sql`
      INSERT INTO stream_values (id)
      VALUES ${__1.sql.join(batchValues.map(v => __1.sql`(${v})`), __1.sql`,`)};
    `);
    }
    const results = [];
    try {
        for (var _b = __asyncValues(db.queryStream(__1.sql`SELECT * FROM stream_values`)), _c; _c = yield _b.next(), !_c.done;) {
            const row = _c.value;
            results.push(row.id);
        }
    } catch (e_1_1) {
        e_1 = { error: e_1_1 };
    } finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
        } finally {
            if (e_1) throw e_1.error;
        }
    }
    expect(results).toEqual(allValues);
}));
//# sourceMappingURL=stream.test.js.map