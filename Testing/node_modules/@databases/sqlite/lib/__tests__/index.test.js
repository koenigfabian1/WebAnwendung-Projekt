"use strict";

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function (resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("../");
jest.setTimeout(30000);
const db = __1.default();
afterAll(() => __awaiter(void 0, void 0, void 0, function* () {
    yield db.dispose();
}));
test('error messages', () => __awaiter(void 0, void 0, void 0, function* () {
    const s = __1.sql;
    yield expect(db.query(s`
    SELECT * FRM 'baz;
  `)).rejects.toMatchInlineSnapshot(`[Error: SQLITE_ERROR: near "FRM": syntax error]`);
}));
test('query', () => __awaiter(void 0, void 0, void 0, function* () {
    const [{ foo }] = yield db.query(__1.sql`SELECT 1 + 1 as foo`);
    expect(foo).toBe(2);
}));
test('query with params', () => __awaiter(void 0, void 0, void 0, function* () {
    const [{ foo }] = yield db.query(__1.sql`SELECT 1 + ${41} as ${__1.sql.ident('foo')}`);
    expect(foo).toBe(42);
}));
test('bigint', () => __awaiter(void 0, void 0, void 0, function* () {
    yield db.query(__1.sql`CREATE TABLE bigint_test_bigints (id BIGINT NOT NULL PRIMARY KEY);`);
    yield db.query(__1.sql`
    INSERT INTO bigint_test_bigints (id)
    VALUES (1),
           (2),
           (42);
  `);
    const result = yield db.query(__1.sql`SELECT id from bigint_test_bigints;`);
    expect(result).toEqual([{ id: 1 }, { id: 2 }, { id: 42 }]);
}));
test('transaction', () => __awaiter(void 0, void 0, void 0, function* () {
    const result = yield db.tx(tx => __awaiter(void 0, void 0, void 0, function* () {
        const a = yield tx.query(__1.sql`SELECT 1 + ${41} as ${__1.sql.ident('foo')}`);
        const b = yield tx.query(__1.sql`SELECT 1 + 2 as bar;`);
        return { a, b };
    }));
    expect(result).toMatchInlineSnapshot(`
Object {
  "a": Array [
    Object {
      "foo": 42,
    },
  ],
  "b": Array [
    Object {
      "bar": 3,
    },
  ],
}
`);
}));
//# sourceMappingURL=index.test.js.map